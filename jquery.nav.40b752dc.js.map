{"version":3,"sources":["js/jquery.nav.js"],"names":["$","window","document","undefined","OnePageNav","elem","options","$elem","metadata","data","$win","sections","didScroll","$doc","docHeight","height","defaults","prototype","navItems","currentClass","changeHash","easing","filter","navHeight","scrollSpeed","scrollThreshold","begin","end","scrollChange","init","config","extend","$nav","find","on","proxy","handleClick","getPositions","bindInterval","adjustNav","self","$parent","removeClass","addClass","t","setInterval","getHash","$link","attr","split","linkHref","topPos","$target","each","length","offset","top","Math","round","getSection","windowPos","returnValue","windowHeight","section","e","currentTarget","parent","newLoc","hasClass","unbindInterval","scrollTo","location","hash","preventDefault","windowTop","scrollTop","position","target","callback","animate","clearInterval","unbind","fn","onePageNav","jQuery"],"mappings":"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","file":"jquery.nav.40b752dc.js","sourceRoot":"..","sourcesContent":["/*\n * jQuery One Page Nav Plugin\n * http://github.com/davist11/jQuery-One-Page-Nav\n *\n * Copyright (c) 2010 Trevor Davis (http://trevordavis.net)\n * Dual licensed under the MIT and GPL licenses.\n * Uses the same license as jQuery, see:\n * http://jquery.org/license\n *\n * @version 3.0.0\n *\n * Example usage:\n * $('#nav').onePageNav({\n *   currentClass: 'current',\n *   changeHash: false,\n *   scrollSpeed: 750\n * });\n */\n\n; (function ($, window, document, undefined) {\n\n    // our plugin constructor\n    var OnePageNav = function (elem, options) {\n        this.elem = elem;\n        this.$elem = $(elem);\n        this.options = options;\n        this.metadata = this.$elem.data('plugin-options');\n        this.$win = $(window);\n        this.sections = {};\n        this.didScroll = false;\n        this.$doc = $(document);\n        this.docHeight = this.$doc.height();\n    };\n\n    // the plugin prototype\n    OnePageNav.prototype = {\n        defaults: {\n            navItems: 'a',\n            currentClass: 'current',\n            changeHash: false,\n            easing: 'swing',\n            filter: '',\n\t\t\tnavHeight: 70,\n            scrollSpeed: 750,\n            scrollThreshold: 0.5,\n            begin: false,\n            end: false,\n            scrollChange: false\n        },\n\n        init: function () {\n            // Introduce defaults that can be extended either\n            // globally or using an object literal.\n            this.config = $.extend({}, this.defaults, this.options, this.metadata);\n\n            this.$nav = this.$elem.find(this.config.navItems);\n\n            //Filter any links out of the nav\n            if (this.config.filter !== '') {\n                this.$nav = this.$nav.filter(this.config.filter);\n            }\n\n            //Handle clicks on the nav\n            this.$nav.on('click.onePageNav', $.proxy(this.handleClick, this));\n\n            //Get the section positions\n            this.getPositions();\n\n            //Handle scroll changes\n            this.bindInterval();\n\n            //Update the positions on resize too\n            this.$win.on('resize.onePageNav', $.proxy(this.getPositions, this));\n\n            return this;\n        },\n\n        adjustNav: function (self, $parent) {\n            self.$elem.find('.' + self.config.currentClass).removeClass(self.config.currentClass);\n            $parent.addClass(self.config.currentClass);\n        },\n\n        bindInterval: function () {\n            var self = this;\n            var docHeight;\n\n            self.$win.on('scroll.onePageNav', function () {\n                self.didScroll = true;\n            });\n\n            self.t = setInterval(function () {\n                docHeight = self.$doc.height();\n\n                //If it was scrolled\n                if (self.didScroll) {\n                    self.didScroll = false;\n                    self.scrollChange();\n                }\n\n                //If the document height changes\n                if (docHeight !== self.docHeight) {\n                    self.docHeight = docHeight;\n                    self.getPositions();\n                }\n            }, 250);\n        },\n\n        getHash: function ($link) {\n            return $link.attr('href').split('#')[1];\n        },\n\n        getPositions: function () {\n            var self = this;\n            var linkHref;\n            var topPos;\n            var $target;\n\n            self.$nav.each(function () {\n                linkHref = self.getHash($(this));\n                $target = $('#' + linkHref);\n\n                if ($target.length) {\n                    topPos = $target.offset().top;\n\n                    self.sections[linkHref] = Math.round(topPos);\n                }\n            });\n        },\n\n        getSection: function (windowPos) {\n            var returnValue = null;\n            var windowHeight = Math.round(this.$win.height() * this.config.scrollThreshold);\n\n\n            for (var section in this.sections) {\n                if ((this.sections[section] - windowHeight) < windowPos) {\n                    returnValue = section;\n\t\t\t\t\t\t\t\t\t\t\n                }\n            }\n\n            return returnValue;\n        },\n\n        handleClick: function (e) {\n            var self = this;\n            var $link = $(e.currentTarget);\n            var $parent = $link.parent();\n            var newLoc = '#' + self.getHash($link);\n\n            if (!$parent.hasClass(self.config.currentClass)) {\n                //Start callback\n                if (self.config.begin) {\n                    self.config.begin();\n                }\n\n                //Change the highlighted nav item\n                self.adjustNav(self, $parent);\n\n                //Removing the auto-adjust on scroll\n                self.unbindInterval();\n\n                //Scroll to the correct position\n                self.scrollTo(newLoc, function () {\n                    //Do we need to change the hash?\n                    if (self.config.changeHash) {\n                        window.location.hash = newLoc;\n                    }\n//\t\t\t\t$('#aboutUs').offset({'top':'60'});\n                    //Add the auto-adjust on scroll back in\n                    self.bindInterval();\n\n                    //End callback\n                    if (self.config.end) {\n                        self.config.end();\n                    }\n                });\n            }\n\n            e.preventDefault();\n        },\n\n        scrollChange: function () {\n            var windowTop = this.$win.scrollTop();\n            var position = this.getSection(windowTop);\n            var $parent;\n\n            //If the position is set\n            if (position !== null) {\n                $parent = this.$elem.find('a[href$=\"#' + position + '\"]').parent();\n\n                //If it's not already the current section\n                if (!$parent.hasClass(this.config.currentClass)) {\n                    //Change the highlighted nav item\n                    this.adjustNav(this, $parent);\n\n                    //If there is a scrollChange callback\n                    if (this.config.scrollChange) {\n                        this.config.scrollChange($parent);\n                    }\n                }\n            }\n        },\n\n        scrollTo: function (target, callback) {\n            var offset = $(target).offset().top - this.config.navHeight;\n            $('html, body').animate({\n                scrollTop: offset\n            }, this.config.scrollSpeed, this.config.easing, callback);\n        },\n\n        unbindInterval: function () {\n            clearInterval(this.t);\n            this.$win.unbind('scroll.onePageNav');\n        }\n    };\n\n    OnePageNav.defaults = OnePageNav.prototype.defaults;\n\n    $.fn.onePageNav = function (options) {\n        return this.each(function () {\n            new OnePageNav(this, options).init();\n        });\n    };\n\n})(jQuery, window, document);"]}